<?php

namespace Shiptor\Bundle\FiasBundle\Repository;

use Doctrine\ORM\Query;
use Doctrine\ORM\Query\Expr\Join;
use Ramsey\Uuid\Uuid;
use Shiptor\Bundle\FiasBundle\Entity\AddressObject;
use Shiptor\Bundle\FiasBundle\Entity\AddressObjectType;

/**
 * AddressObjectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AddressObjectRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param \DateTime|null $date
     * @param boolean|null   $actual
     * @param integer|null   $offset
     * @param integer|null   $limit
     * @param integer|null   $type
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getAddressObject($actual = null, $type = null, \DateTime $date = null, $offset = 0, $limit = null)
    {
        $query = $this
            ->createQueryBuilder('ao')
            ->select('ao, objectType')
            ->leftJoin('ao.shortName', 'objectType')
            ->where('ao.shortName = objectType.scName')
            ->andWhere('ao.aoLevel = objectType.level')
            ->andWhere('LENGTH(ao.plainCode) <= 11')
            ->orderBy('ao.aoLevel', 'ASC')
            ->addOrderBy('ao.aoId', 'DESC');

        if (null !== $date) {
            $query
                ->andWhere('ao.updateDate >= :date')
                ->setParameter('date', $date);
        }

        if (null !== $actual) {
            $query
                ->andWhere('ao.actStatus = :actual')
                ->setParameter('actual', $actual);
        }

        if (null !== $type) {
            $query
                ->andWhere('ao.divType = :type')
                ->setParameter('type', $type);
        }

        if (null !== $limit) {
            if ($limit > 100000) {
                $limit = 100000;
            }

            $query
                ->setFirstResult($offset)
                ->setMaxResults($limit);
        }

        return $query;
    }

    public function getNextId($id)
    {
        return $this
            ->createQueryBuilder('ao')
            ->andWhere('ao.aoId = :id')
            ->setParameter('id', $id);
    }

    /**
     * @param $postalCode
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getAddressByPostalCode($postalCode)
    {
        $qb = $this
            ->createQueryBuilder('ao');

        $query1 = $this
            ->createQueryBuilder('ao1')
            ->select('DISTINCT CONCAT(ao1.regionCode, ao1.areaCode, ao1.cityCode, ao1.ctArCode)')
            ->andWhere('ao1.actStatus = :actStatus')
            ->andWhere('ao1.currStatus = :currStatus')
            ->andWhere('ao1.postalCode = :postalCode')
            ->getQuery()
            ->getDQL();

        return $qb
            ->select('ao, objectType')
            ->leftJoin('ao.shortName', 'objectType')
            ->where('ao.shortName = objectType.scName')
            ->andWhere('ao.aoLevel = objectType.level')
            ->andWhere('ao.actStatus = :actStatus')
            ->andWhere('ao.currStatus = :currStatus')
            ->setParameter('actStatus', AddressObject::STATUS_ACTUAL)
            ->setParameter('currStatus', 0)
            ->setParameter('postalCode', $postalCode)
            ->andWhere($qb->expr()->in('ao.plainCode', $query1))
            ->orderBy('ao.aoLevel', 'ASC')
            ->addOrderBy('ao.aoId', 'DESC');
    }

    /**
     * @param string $plainCode
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getAddressByPlainCode($plainCode)
    {
        return $this
            ->createQueryBuilder('ao')
            ->where('ao.plainCode = :plainCode')
            ->orWhere('ao.code = :plainCode')
            ->setParameter('plainCode', $plainCode)
            ->setMaxResults(1)
            ->orderBy('ao.aoLevel', 'ASC')
            ->addOrderBy('ao.aoId', 'DESC');
    }

    /**
     * @param AddressObject $address
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getDirectParent(AddressObject $address)
    {
        return $this
            ->createQueryBuilder('ao')
            ->where('ao.aoGuid = :aoGuid')
            ->andWhere('ao.actStatus = :actStatus')
            ->andWhere('ao.nextId IS NULL')
            ->setParameter('aoGuid', $address->getParentGuid())
            ->setParameter('actStatus', AddressObject::STATUS_ACTUAL)
            ->setMaxResults(1);
    }

    /**
     * @param AddressObject $addressObject
     * @return AddressObject
     */
    public function getLast(AddressObject $addressObject)
    {
        $nextAddress = $addressObject->getNextId();
        $lastAddress = $addressObject;
        while ($nextAddress) {
            /** @var AddressObject $lastAddress */
            $lastAddress = $nextAddress;
            $nextAddress = $nextAddress->getNextId();
        }

        return $lastAddress;
    }

    /**
     * @param AddressObject $addressObject
     * @return array
     */
    public function getRegionAndLocalLevel(AddressObject $addressObject)
    {
        /** @var AddressObject $region */
        $region = $addressObject;
        $localLevel = 1;
        while ($region->getParentGuid()) {
            /** @var AddressObject $parent */
            $parent = $this
                ->createQueryBuilder('ao')
                ->where('ao.aoGuid = :parent')
                ->setParameter('parent', $region->getParentGuid())
                ->setMaxResults(1)
                ->orderBy('ao.plainCode')
                ->getQuery()
                ->getOneOrNullResult();

            if ($parent) {
                ++$localLevel;
                $region = $this->getLast($parent);
            }
        }

        return [
            $localLevel,
            $region,
        ];
    }
}
