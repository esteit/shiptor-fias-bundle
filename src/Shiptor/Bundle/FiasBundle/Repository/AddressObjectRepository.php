<?php

namespace Shiptor\Bundle\FiasBundle\Repository;

use Doctrine\ORM\Query;
use Doctrine\ORM\Query\Expr\Join;
use Ramsey\Uuid\Uuid;
use Shiptor\Bundle\FiasBundle\Entity\AddressObject;
use Shiptor\Bundle\FiasBundle\Entity\AddressObjectType;
use Shiptor\Bundle\FiasBundle\Exception\ObjectDeletedException;

/**
 * AddressObjectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AddressObjectRepository extends \Doctrine\ORM\EntityRepository
{
    const MAX_LIMIT = 100;

    /**
     * @param array $params
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getAddressObject(array $params)
    {
        $query = $this
            ->createQueryBuilder('ao')
            ->select('ao, objectType')
            ->leftJoin('ao.shortName', 'objectType')
            ->where('ao.shortName = objectType.scName')
            ->andWhere('ao.aoLevel = objectType.level')
            ->andWhere('LENGTH(ao.plainCode) <= 11')
            ->orderBy('ao.aoLevel', 'ASC')
            ->addOrderBy('ao.aoId', 'DESC');

        if (isset($params['updateDate'])) {
            $query
                ->andWhere('ao.updateDate >= :date')
                ->setParameter('date', $params['updateDate']);
        }

        if (isset($params['actualStatus'])) {
            $query
                ->andWhere('ao.actStatus = :actual')
                ->setParameter('actual', $params['actualStatus']);
        }

        if (isset($params['currentStatus'])) {
            $query
                ->andWhere('ao.currStatus = :current')
                ->setParameter('current', $params['currentStatus']);
        }

        if (isset($params['operationStatus'])) {
            $query
                ->andWhere('ao.operStatus = :operation')
                ->setParameter('operation', $params['operationStatus']);
        }

        $params['limit'] = ($params['limit'] > self::MAX_LIMIT) ? self::MAX_LIMIT : $params['limit'];

        $query
            ->setFirstResult($params['offset'])
            ->setMaxResults($params['limit']);

        return $query;
    }

    /**
     * @param string $id
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getNextsById(string $id)
    {
        return $this
            ->createQueryBuilder('ao')
            ->andWhere('ao.nextId = :nextId')
            ->setParameter('nextId', $id);
    }

    /**
     * @param $postalCode
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getAddressByPostalCode($postalCode)
    {
        $qb = $this
            ->createQueryBuilder('ao');

        $query1 = $this
            ->createQueryBuilder('ao1')
            ->select('DISTINCT CONCAT(ao1.regionCode, ao1.areaCode, ao1.cityCode, ao1.ctArCode)')
            ->andWhere('ao1.actStatus = :actStatus')
            ->andWhere('ao1.currStatus = :currStatus')
            ->andWhere('ao1.postalCode = :postalCode')
            ->getQuery()
            ->getDQL();

        return $qb
            ->select('ao, objectType')
            ->leftJoin('ao.shortName', 'objectType')
            ->where('ao.shortName = objectType.scName')
            ->andWhere('ao.aoLevel = objectType.level')
            ->andWhere('ao.actStatus = :actStatus')
            ->andWhere('ao.currStatus = :currStatus')
            ->setParameter('actStatus', AddressObject::STATUS_ACTUAL)
            ->setParameter('currStatus', 0)
            ->setParameter('postalCode', $postalCode)
            ->andWhere($qb->expr()->in('ao.plainCode', $query1))
            ->orderBy('ao.aoLevel', 'ASC')
            ->addOrderBy('ao.aoId', 'DESC');
    }

    /**
     * @param string $plainCode
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getAddressByPlainCode($plainCode)
    {
        return $this
            ->createQueryBuilder('ao')
            ->where('ao.plainCode = :plainCode')
            ->orWhere('ao.code = :plainCode')
            ->setParameter('plainCode', $plainCode)
            ->setMaxResults(1)
            ->orderBy('ao.aoLevel', 'ASC')
            ->addOrderBy('ao.aoId', 'DESC');
    }

    /**
     * @param AddressObject $address
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getDirectParent(AddressObject $address)
    {
        return $this
            ->createQueryBuilder('ao')
            ->where('ao.aoGuid = :aoGuid')
            ->andWhere('ao.actStatus = :actStatus')
            ->andWhere('ao.nextId IS NULL')
            ->setParameter('aoGuid', $address->getParentGuid())
            ->setParameter('actStatus', AddressObject::STATUS_ACTUAL)
            ->setMaxResults(1);
    }

    /**
     * @param AddressObject $addressObject
     * @return AddressObject
     * @throws ObjectDeletedException
     * @throws \Exception
     */
    public function getLast(AddressObject $addressObject)
    {
        $nextAddress = $addressObject->getNextId();
        $lastAddress = $addressObject;
        while ($nextAddress) {
            /** @var AddressObject $lastAddress */
            $lastAddress = $nextAddress;
            try {
                $nextAddress = $nextAddress->getNextId();

                if ($nextAddress && $nextAddress->getRemovedAt()) {
                    throw new ObjectDeletedException();
                }
            } catch (\Exception $exception) {
                if (preg_match('/IDs aoId(.+) was not found/i', $exception->getMessage())) {
                    throw new ObjectDeletedException();
                }

                throw $exception;
            }

        }

        return $lastAddress;
    }

    /**
     * @param AddressObject $addressObject
     * @return array
     * @throws ObjectDeletedException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getRegionAndLocalLevel(AddressObject $addressObject)
    {
        /** @var AddressObject $region */
        $region = $addressObject;
        $localLevel = 1;
        while ($region->getParentGuid()) {
            /** @var AddressObject $parent */
            $parent = $this
                ->createQueryBuilder('ao')
                ->where('ao.aoGuid = :parent')
                ->setParameter('parent', $region->getParentGuid())
                ->setMaxResults(1)
                ->orderBy('ao.plainCode')
                ->getQuery()
                ->getOneOrNullResult();

            if ($parent) {
                ++$localLevel;
                $region = $this->getLast($parent);
            }
        }

        return [
            $localLevel,
            $region,
        ];
    }
}
